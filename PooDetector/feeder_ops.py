# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_Feeder_Ops.ipynb (unless otherwise specified).

__all__ = ['CAP_URL', 'PATH_SAVE_FILES', 'PATH_FILE_LOG', 'SLEEP_TIME_BETWEEN_CAPTURE', 'ACTIVATE_PREDICTION',
           'SLEEP_BETWEEN_FEEDING', 'PREDICTION_THRES', 'MAX_FEEDING_SESSIONS_PER_DAY', 'ACTIVATE_FEEDER', 'PATH_MODEL',
           'PATH_FOLDER_SUCCESSFUL_PREDICTIONS', 'FEEDER_URL', 'FEEDER_USER', 'FEEDER_PWD', 'FEEDER_CMD', 'get_logger',
           'create_folder', 'get_sunrise', 'get_sunset', 'cap_and_predict', 'run_feeder']

# Cell
import os
import argparse
from datetime import datetime, timedelta, date
import time
import logging
import numpy as np
import cv2
import sys
import paramiko
from pathlib import Path
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv
from fastai.vision import *
from fastscript import *
from astral import LocationInfo
from astral.sun import sun
from dateutil import tz

# Cell
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())


CAP_URL = os.getenv('CAP_URL', default='.')
PATH_SAVE_FILES = os.getenv('PATH_SAVE_FILES', default='data')
PATH_FILE_LOG = os.getenv('PATH_FILE_LOG', default='data/camera_log')
SLEEP_TIME_BETWEEN_CAPTURE = float(os.getenv('SLEEP_TIME_BETWEEN_CAPTURE', default=0.25))


ACTIVATE_PREDICTION = bool(os.getenv('ACTIVATE_PREDICTION', default=False))
SLEEP_BETWEEN_FEEDING = int(os.getenv('SLEEP_BETWEEN_FEEDING', default=3600))
PREDICTION_THRES = float(os.getenv('PREDICTION_THRES', default=0.98))
MAX_FEEDING_SESSIONS_PER_DAY = int(os.getenv('MAX_FEEDING_SESSIONS_PER_DAY', default=4))
ACTIVATE_FEEDER = bool(os.getenv('ACTIVATE_FEEDER', default=False))
PATH_MODEL = os.getenv('PATH_MODEL', default='data')
PATH_FOLDER_SUCCESSFUL_PREDICTIONS = os.getenv('PATH_FOLDER_SUCCESSFUL_PREDICTIONS', default='data/successful')

FEEDER_URL = os.getenv('FEEDER_URL')
FEEDER_USER = os.getenv('FEEDER_USER')
FEEDER_PWD = os.getenv('FEEDER_PWD')
FEEDER_CMD = os.getenv('FEEDER_CMD', default='echo test')



# Cell
def get_logger(log_file=None):
    """
    Initialize global logger and return it.

    :param log_file: log to this file, or to standard output if None
    :return: created logger
    """

    formatter = logging.Formatter(
        fmt='%(asctime)s %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S')

    log = logging.getLogger()
    if len(log.handlers) >= 2:
        return log

    log.setLevel(logging.INFO)
    if log_file is not None:
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        handler = RotatingFileHandler(
            log_file,
            maxBytes=1024*1024*30,
            backupCount=3)
        handler.setFormatter(formatter)
        log.addHandler(handler)
        handler.setLevel(logging.DEBUG)

    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    handler.setLevel(logging.INFO)
    log.addHandler(handler)

    return log

# Cell
def create_folder(path: Path, foldername):
    """ creates a folder if it does not exist already """
    (path / foldername).mkdir(parents=True, exist_ok=True)
    return path / foldername

# Cell
def get_sunrise():
    """gets the sunrise as an int"""
    city = LocationInfo("Ludesch", "Austria", "Europe/Berlin", 47.2, 9.7)
    s = sun(city.observer, date= datetime.now())
    return int(s["sunrise"].astimezone(tz.tzlocal()).strftime('%H%M'))


def get_sunset():
    """gets the sunset as an int"""
    city = LocationInfo("Ludesch", "Austria", "Europe/Berlin", 47.2, 9.7)
    s = sun(city.observer, date= datetime.now())
    return int(s["sunset"].astimezone(tz.tzlocal()).strftime('%H%M'))

# Cell
@call_parse
def cap_and_predict():
    """this function captures camera pictures. To configure this function please use a .env file"""



    logger = get_logger(PATH_FILE_LOG)

    path = Path(PATH_SAVE_FILES)

    current_date = datetime.today().date()
    prev_date = datetime.min.date


    last_run_feeder = datetime.min
    num_run_feeder_per_day = 0

    model = None
    if ACTIVATE_PREDICTION:
        model = load_learner(PATH_MODEL)

    while True:
        time.sleep(10)
        logger.info('outer while loop')

        try:
            cap = cv2.VideoCapture(CAP_URL)
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            while cap.isOpened():

                ret, pic = cap.read()

                if ret is False:
                    logger.warning('pic not readable')
                    break

                now = datetime.now()
                current_date = datetime.today().date()
                time_current = int(now.strftime('%H%M'))

                if get_sunrise() > time_current:
                    continue

                if get_sunset() < time_current:
                    continue

                if prev_date != current_date:
                    num_run_feeder_per_day = 0
                    fld_save_to = create_folder(path, current_date.strftime('%Y%m%d'))
                    logger.info(f"msg=update folder to {current_date}")

                now_str = now.strftime('%Y%m%d%H%M%S_%f')
                path_save_file = fld_save_to / (now_str + '.jpg')
                cv2.imwrite(str(path_save_file), pic)
                prev_date = datetime.today().date() #assign new date to compare to

                prediction = None
                if ACTIVATE_PREDICTION:
                    img = open_image(path_save_file)
                    prediction = model.predict(img)[2][0].numpy()
                    folder =  Path(PATH_FOLDER_SUCCESSFUL_PREDICTIONS) / current_date.strftime('%Y%m%d')
                    if prediction >= PREDICTION_THRES:
                        folder = create_folder(Path(PATH_FOLDER_SUCCESSFUL_PREDICTIONS),
                                               current_date.strftime('%Y%m%d'))
                        img.save(folder / path_save_file.name)

                if ACTIVATE_FEEDER:
                    if PREDICTION_THRES <= prediction:
                        if (last_run_feeder + timedelta(seconds=SLEEP_BETWEEN_FEEDING) < datetime.now()
                            and num_run_feeder_per_day <= MAX_FEEDING_SESSIONS_PER_DAY):
                            log.info("running feeder")
                            last_run_feeder = datetime.now()
                            num_run_feeder_per_day += 1
                            run_feeder()


                time.sleep(SLEEP_TIME_BETWEEN_CAPTURE)

        except Exception as e:
            logger.error(e)

        finally:
            cap.release()
            cv2.destroyAllWindows()

# Cell
def run_feeder():
    """runs feeder"""
    log = get_logger(PATH_FILE_LOG)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(FEEDER_URL, username=FEEDER_USER, password=FEEDER_PWD)
    ssh_stdin, ssh_stdout, ssh_stder = ssh.exec_command(FEEDER_CMD)
    log.info(ssh_stdout.read())
    log.info(ssh_stder.read())
