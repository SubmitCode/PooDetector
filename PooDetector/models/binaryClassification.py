# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_binaryHorsePoo.ipynb (unless otherwise specified).

__all__ = ['prepare_data', 'get_learner', 'train_model']

# Cell
from ..dataset_operations import extract_jsonl_to_binary_folders

# Cell
from fastai.vision import *
from fastai.callbacks import EarlyStoppingCallback
from prodigy.util import read_jsonl
import os
import shutil
import fire

# Cell
def prepare_data(fld_input:str='data/tmp'):
    """function to get a fastai databunch which can be used for training"""
    #tfms = get_transforms(do_flip=False, max_zoom=1, max_warp=None)
    t_tfms = []
    t_tfms.append(flip_lr(p=0.5))
    t_tfms.append(symmetric_warp(magnitude=(-0.2,0.2), p=0.75))
    t_tfms.append(rotate(degrees=(-10,10), p=0.75))
    t_tfms.append(rand_zoom(scale=(1.,1.1), p=0.75))
    t_tfms.append(brightness(change=(0.5*(1-0.2), 0.5*(1+0.2)), p=0.75))
    t_tfms.append(contrast(scale=(1-0.2, 1/(1-0.2)), p=0.75))
    tfms =  (t_tfms , [])
    return (ImageList.from_folder(fld_input)
            .split_by_rand_pct(0.2)
            .label_from_folder()
            .transform(tfms, size=224)
            .databunch()
            .normalize(imagenet_stats))


# Cell
def get_learner(data:ImageDataBunch=None, model:Module=None):
    """get a lerner object for training"""
    if data is None:
        data = prepare_data()
    if model is None:
        model = models.resnet50

    early_stopping = partial(EarlyStoppingCallback,  min_delta=0.005, patience=5)

    return cnn_learner(data, base_arch=model, callback_fns=[early_stopping])

# Cell
def train_model(path_extract_pics = 'data/tmp'):
    """start training a new model with early stopping and export it"""
    if os.path.exists(path_extract_pics) and os.path.isdir(path_extract_pics):
        shutil.rmtree(path_extract_pics)

    extract_jsonl_to_binary_folders

# Cell
if __name__ == '__main__':
  fire.Fire({
      'extract_jsonl_to_binary_folders': extract_jsonl_to_binary_folders
  })