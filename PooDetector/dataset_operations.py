# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_dataset_operations.ipynb (unless otherwise specified).

__all__ = ['create_folders', 'save_base64_image', 'extract_jsonl_to_binary_folders']

# Cell
from prodigy.util import b64_uri_to_bytes
from prodigy import get_stream
from pathlib import Path
import PIL.Image
import fire
import io
#from fastscript import *

# Cell
def create_folders(path:str, label:str) -> None:
    """create the target folder"""
    path = Path(path)
    path.mkdir(parents=True, exist_ok=True)
    path_pos = path / label
    path_pos.mkdir(parents=True, exist_ok=True)
    path_neg = path / ('no_' + label)
    path_neg.mkdir(parents=True, exist_ok=True)

# Cell
def save_base64_image(path, filename, uri):
    """save base64 encoded image """
    tgt_path = Path(path) / filename
    pil_image = PIL.Image.open(io.BytesIO(b64_uri_to_bytes(uri)))
    pil_image.save(str(tgt_path))

# Cell
def extract_jsonl_to_binary_folders(
        path:str='data/binary_horse_poo.jsonl',
        positive_label:str='horse_poo'
    ):
    """this function extracts pictures to folders based on the answer key"""
    print(path)
    path = Path(path) #convert to pathlib
    stream = get_stream(str(path))
    create_folders(str(path.parent), positive_label)

    for task in stream:
        if task['answer'] == 'accept':
            #print(f"{str(path.parent / positive_label), task['text'] + '.jpg'}")
            save_base64_image(str(path.parent / positive_label), task['text'] + '.jpg', task['image'])
        if task['answer'] == 'reject':
            #print(f"{str(path.parent / ('no_' + positive_label)), task['text'] + '.jpg'}")
            save_base64_image(str(path.parent / ('no_' + positive_label)), task['text'] + '.jpg', task['image'])

